
build/prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001084  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  0800120c  0800120c  0000920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001214  08001214  00009214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000844  20000000  08001218  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000005c  20000844  08001a5c  00010844  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200008a0  08001ab8  00010844  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
  8 .debug_info   000052cf  00000000  00000000  00010874  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000f30  00000000  00000000  00015b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018e6  00000000  00000000  00016a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003c0  00000000  00000000  00018359  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  00018719  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001382a  00000000  00000000  00018a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003785  00000000  00000000  0002c2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0006423a  00000000  00000000  0002fa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000e0  00000000  00000000  00093c62  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000f10  00000000  00000000  00093d44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000844 	.word	0x20000844
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011f4 	.word	0x080011f4

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080011f4 	.word	0x080011f4
 80001d8:	20000848 	.word	0x20000848
 80001dc:	20000844 	.word	0x20000844
 80001e0:	00000000 	.word	0x00000000

080001e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001e8:	4a15      	ldr	r2, [pc, #84]	; (8000240 <SystemInit+0x5c>)
 80001ea:	4b15      	ldr	r3, [pc, #84]	; (8000240 <SystemInit+0x5c>)
 80001ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <SystemInit+0x60>)
 80001fa:	4b12      	ldr	r3, [pc, #72]	; (8000244 <SystemInit+0x60>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000204:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <SystemInit+0x60>)
 8000206:	2200      	movs	r2, #0
 8000208:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800020a:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <SystemInit+0x60>)
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <SystemInit+0x60>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000218:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <SystemInit+0x60>)
 800021c:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <SystemInit+0x64>)
 800021e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000220:	4a08      	ldr	r2, [pc, #32]	; (8000244 <SystemInit+0x60>)
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <SystemInit+0x60>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <SystemInit+0x60>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000232:	f000 f80b 	bl	800024c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000236:	4b02      	ldr	r3, [pc, #8]	; (8000240 <SystemInit+0x5c>)
 8000238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800023c:	609a      	str	r2, [r3, #8]
#endif
}
 800023e:	bd80      	pop	{r7, pc}
 8000240:	e000ed00 	.word	0xe000ed00
 8000244:	40023800 	.word	0x40023800
 8000248:	24003010 	.word	0x24003010

0800024c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	2300      	movs	r3, #0
 8000258:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800025a:	4a35      	ldr	r2, [pc, #212]	; (8000330 <SetSysClock+0xe4>)
 800025c:	4b34      	ldr	r3, [pc, #208]	; (8000330 <SetSysClock+0xe4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000264:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000266:	4b32      	ldr	r3, [pc, #200]	; (8000330 <SetSysClock+0xe4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800026e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d103      	bne.n	8000284 <SetSysClock+0x38>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000282:	d1f0      	bne.n	8000266 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000284:	4b2a      	ldr	r3, [pc, #168]	; (8000330 <SetSysClock+0xe4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800028c:	2b00      	cmp	r3, #0
 800028e:	d002      	beq.n	8000296 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000290:	2301      	movs	r3, #1
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	e001      	b.n	800029a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000296:	2300      	movs	r3, #0
 8000298:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d142      	bne.n	8000326 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002a0:	4a23      	ldr	r2, [pc, #140]	; (8000330 <SetSysClock+0xe4>)
 80002a2:	4b23      	ldr	r3, [pc, #140]	; (8000330 <SetSysClock+0xe4>)
 80002a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002aa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002ac:	4a21      	ldr	r2, [pc, #132]	; (8000334 <SetSysClock+0xe8>)
 80002ae:	4b21      	ldr	r3, [pc, #132]	; (8000334 <SetSysClock+0xe8>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002b6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <SetSysClock+0xe4>)
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <SetSysClock+0xe4>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002c0:	4a1b      	ldr	r2, [pc, #108]	; (8000330 <SetSysClock+0xe4>)
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <SetSysClock+0xe4>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002ca:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SetSysClock+0xe4>)
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <SetSysClock+0xe4>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002d6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <SetSysClock+0xe4>)
 80002da:	4a17      	ldr	r2, [pc, #92]	; (8000338 <SetSysClock+0xec>)
 80002dc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002de:	4a14      	ldr	r2, [pc, #80]	; (8000330 <SetSysClock+0xe4>)
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <SetSysClock+0xe4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002e8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002ea:	bf00      	nop
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <SetSysClock+0xe4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f9      	beq.n	80002ec <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002f8:	4b10      	ldr	r3, [pc, #64]	; (800033c <SetSysClock+0xf0>)
 80002fa:	f240 6205 	movw	r2, #1541	; 0x605
 80002fe:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SetSysClock+0xe4>)
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SetSysClock+0xe4>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	f023 0303 	bic.w	r3, r3, #3
 800030a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800030c:	4a08      	ldr	r2, [pc, #32]	; (8000330 <SetSysClock+0xe4>)
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <SetSysClock+0xe4>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000318:	bf00      	nop
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <SetSysClock+0xe4>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f003 030c 	and.w	r3, r3, #12
 8000322:	2b08      	cmp	r3, #8
 8000324:	d1f9      	bne.n	800031a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40023800 	.word	0x40023800
 8000334:	40007000 	.word	0x40007000
 8000338:	07405408 	.word	0x07405408
 800033c:	40023c00 	.word	0x40023c00

08000340 <_sbrk>:
 */

extern int  _end;

extern "C" {
  caddr_t _sbrk ( int incr ) {
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]

    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if (heap == NULL) {
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <_sbrk+0x38>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d102      	bne.n	8000356 <_sbrk+0x16>
      heap = (unsigned char *)&_end;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <_sbrk+0x38>)
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <_sbrk+0x3c>)
 8000354:	601a      	str	r2, [r3, #0]
    }
    prev_heap = heap;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <_sbrk+0x38>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	60fb      	str	r3, [r7, #12]
    /* check removed to show basic approach */

    heap += incr;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <_sbrk+0x38>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <_sbrk+0x38>)
 8000366:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap;
 8000368:	68fb      	ldr	r3, [r7, #12]
  }
 800036a:	4618      	mov	r0, r3
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000860 	.word	0x20000860
 800037c:	200008a0 	.word	0x200008a0

08000380 <_ZN9stm32plus12GpioPortBaseC1EP12GPIO_TypeDef>:
  /**
   * Constructor
   * @param peripheralAddress
   */

  inline GpioPortBase::GpioPortBase(GPIO_TypeDef *peripheralAddress)
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
    : _peripheralAddress(peripheralAddress) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	641a      	str	r2, [r3, #64]	; 0x40
  }
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4618      	mov	r0, r3
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <_ZN9stm32plus12GpioPortBase13setPinHandlerEhPNS_4GpioE>:
   * Set the pin handler for the pin at a given position
   * @param index The position (0..15)
   * @param pinHandler The handler for that position
   */

  inline void GpioPortBase::setPinHandler(uint8_t index,Gpio *pinHandler) {
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	460b      	mov	r3, r1
 80003aa:	607a      	str	r2, [r7, #4]
 80003ac:	72fb      	strb	r3, [r7, #11]
    _pinHandlers[index]=pinHandler;
 80003ae:	7afa      	ldrb	r2, [r7, #11]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	6879      	ldr	r1, [r7, #4]
 80003b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <_ZNK9stm32plus12GpioPortBase20getPeripheralAddressEv>:

  /**
   * Cast to the GPIO peripheral address
   */

  inline GPIO_TypeDef *GpioPortBase::getPeripheralAddress() const {
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    return _peripheralAddress;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 80003d0:	4618      	mov	r0, r3
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <_ZN9stm32plus4GpioC1ERNS_12GpioPortBaseE>:
  /**
   * Constructor
   * @param port
   */

  inline Gpio::Gpio(GpioPortBase& portBase)
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
    : _portBase(portBase),
      _peripheralAddress(portBase.getPeripheralAddress()) {
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	683a      	ldr	r2, [r7, #0]
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	6838      	ldr	r0, [r7, #0]
 80003ee:	f7ff ffe9 	bl	80003c4 <_ZNK9stm32plus12GpioPortBase20getPeripheralAddressEv>
 80003f2:	4602      	mov	r2, r0
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	605a      	str	r2, [r3, #4]
  }
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4618      	mov	r0, r3
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop

08000404 <_ZN9stm32plus4Gpio14setSelectedPinEh>:
  /**
   * Set the selected pin number to one of those that you initialised this class with
   * @param pinNumber The pin number (0..15)
   */

  inline void Gpio::setSelectedPin(uint8_t pinNumber) {
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
    _selectedPin=1 << pinNumber;
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2201      	movs	r2, #1
 8000414:	fa02 f303 	lsl.w	r3, r2, r3
 8000418:	b29a      	uxth	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	815a      	strh	r2, [r3, #10]
  }
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <_ZNK9stm32plus4Gpio3setEv>:

  /**
   * Set the selected pin to HIGH.
   */

  inline void Gpio::set() const {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_SET);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685a      	ldr	r2, [r3, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	895b      	ldrh	r3, [r3, #10]
 8000438:	4610      	mov	r0, r2
 800043a:	4619      	mov	r1, r3
 800043c:	2201      	movs	r2, #1
 800043e:	f000 fa55 	bl	80008ec <GPIO_WriteBit>
  }
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <_ZNK9stm32plus4Gpio5resetEv>:

  /**
   * Set the selected pin to LOW.
   */

  inline void Gpio::reset() const {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
    GPIO_WriteBit(_peripheralAddress,_selectedPin,Bit_RESET);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	895b      	ldrh	r3, [r3, #10]
 8000458:	4610      	mov	r0, r2
 800045a:	4619      	mov	r1, r3
 800045c:	2200      	movs	r2, #0
 800045e:	f000 fa45 	bl	80008ec <GPIO_WriteBit>
  }
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <_ZN9stm32plus10gpioHelper13getPeripheralILm1073875968EEEmv>:

    template<uint32_t> uint32_t getPeripheral();          ///< generic template - never used
    template<> inline uint32_t getPeripheral<GPIOA_BASE>() { return RCC_AHB1Periph_GPIOA; }
    template<> inline uint32_t getPeripheral<GPIOB_BASE>() { return RCC_AHB1Periph_GPIOB; }
    template<> inline uint32_t getPeripheral<GPIOC_BASE>() { return RCC_AHB1Periph_GPIOC; }
    template<> inline uint32_t getPeripheral<GPIOD_BASE>() { return RCC_AHB1Periph_GPIOD; }
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
 800046c:	2308      	movs	r3, #8
 800046e:	4618      	mov	r0, r3
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <_ZN9stm32plus16MillisecondTimer5delayEm>:
  /**
   * Delay for given time. Waits for the current value of the systick counter to reach a target.
   * @param millis The amount of time to wait.
   */

  inline void MillisecondTimer::delay(uint32_t millis) {
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]

    uint32_t target;

    target=_counter+millis;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <_ZN9stm32plus16MillisecondTimer5delayEm+0x34>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4413      	add	r3, r2
 8000488:	60fb      	str	r3, [r7, #12]
    while(_counter<target);
 800048a:	bf00      	nop
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <_ZN9stm32plus16MillisecondTimer5delayEm+0x34>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	429a      	cmp	r2, r3
 8000494:	bf34      	ite	cc
 8000496:	2301      	movcc	r3, #1
 8000498:	2300      	movcs	r3, #0
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1f5      	bne.n	800048c <_ZN9stm32plus16MillisecondTimer5delayEm+0x14>
  }
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000864 	.word	0x20000864

080004b0 <_ZN5Blink3runEv>:

class Blink {

  public:

    void run() {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b096      	sub	sp, #88	; 0x58
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]

      // initialise the pin for output

      GpioD<DefaultDigitalOutputFeature<13> > pd;
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f82b 	bl	8000518 <_ZN9stm32plus8GpioPortILm1073875968EINS_20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS3_18GpioPullUpDownTypeE0EILh13EEEEEEC1Ev>
      // loop forever switching it on and off with a 1 second
      // delay in between each cycle

      for(;;) {

        pd[13].set();
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	4618      	mov	r0, r3
 80004c8:	210d      	movs	r1, #13
 80004ca:	f000 f83f 	bl	800054c <_ZN9stm32plus8GpioPortILm1073875968EINS_20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS3_18GpioPullUpDownTypeE0EILh13EEEEEEixEh>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ffa9 	bl	8000428 <_ZNK9stm32plus4Gpio3setEv>
        MillisecondTimer::delay(1000);
 80004d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004da:	f7ff ffcd 	bl	8000478 <_ZN9stm32plus16MillisecondTimer5delayEm>

        pd[13].reset();
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	4618      	mov	r0, r3
 80004e4:	210d      	movs	r1, #13
 80004e6:	f000 f831 	bl	800054c <_ZN9stm32plus8GpioPortILm1073875968EINS_20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS3_18GpioPullUpDownTypeE0EILh13EEEEEEixEh>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ffab 	bl	8000448 <_ZNK9stm32plus4Gpio5resetEv>
        MillisecondTimer::delay(1000);
 80004f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f6:	f7ff ffbf 	bl	8000478 <_ZN9stm32plus16MillisecondTimer5delayEm>
      }
 80004fa:	e7e2      	b.n	80004c2 <_ZN5Blink3runEv+0x12>

080004fc <main>:

/*
 * Main entry point
 */

int main() {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  // set up SysTick at 1ms resolution
  MillisecondTimer::initialise();
 8000502:	f000 f93d 	bl	8000780 <_ZN9stm32plus16MillisecondTimer10initialiseEv>

  Blink blink;
  blink.run();
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ffd1 	bl	80004b0 <_ZN5Blink3runEv>

  // not reached
  return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <_ZN9stm32plus8GpioPortILm1073875968EINS_20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS3_18GpioPullUpDownTypeE0EILh13EEEEEEC1Ev>:
      /**
       * Constructor
       * @param addr The peripheral address (GPIOA, GPIOB, ...)
       */

      GpioPort() :
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
        GpioPortBase(initClock()),
        Features((GpioPortBase&)*this)... {
 8000520:	687c      	ldr	r4, [r7, #4]
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f82a 	bl	800057c <_ZN9stm32plus8GpioPortILm1073875968EINS_20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS3_18GpioPullUpDownTypeE0EILh13EEEEEE9initClockEv>
 8000528:	4603      	mov	r3, r0
 800052a:	4620      	mov	r0, r4
 800052c:	4619      	mov	r1, r3
 800052e:	f7ff ff27 	bl	8000380 <_ZN9stm32plus12GpioPortBaseC1EP12GPIO_TypeDef>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4610      	mov	r0, r2
 800053c:	4619      	mov	r1, r3
 800053e:	f000 f82f 	bl	80005a0 <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEEC1ERNS_12GpioPortBaseE>
      }
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bd90      	pop	{r4, r7, pc}

0800054c <_ZN9stm32plus8GpioPortILm1073875968EINS_20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS3_18GpioPullUpDownTypeE0EILh13EEEEEEixEh>:
       * calls can change the pin used by that reference.
       * @param selectedPin The pin to select
       * @return A reference to the pin that you can call operations such as set(), reset() on.
       */

      Gpio& operator[](uint8_t selectedPin) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
        _pinHandlers[selectedPin]->setSelectedPin(selectedPin);
 8000558:	78fa      	ldrb	r2, [r7, #3]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	4610      	mov	r0, r2
 8000564:	4619      	mov	r1, r3
 8000566:	f7ff ff4d 	bl	8000404 <_ZN9stm32plus4Gpio14setSelectedPinEh>
        return *(_pinHandlers[selectedPin]);
 800056a:	78fa      	ldrb	r2, [r7, #3]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      }
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop

0800057c <_ZN9stm32plus8GpioPortILm1073875968EINS_20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS3_18GpioPullUpDownTypeE0EILh13EEEEEE9initClockEv>:
      /**
       * Init clock and return port address
       * @return the peripheral port address
       */

      GPIO_TypeDef *initClock() {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
        RCC_AHB1PeriphClockCmd(gpioHelper::getPeripheral<TPortAddress>(),ENABLE);
 8000584:	f7ff ff70 	bl	8000468 <_ZN9stm32plus10gpioHelper13getPeripheralILm1073875968EEEmv>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	2101      	movs	r1, #1
 800058e:	f000 f9c5 	bl	800091c <RCC_AHB1PeriphClockCmd>
        return (GPIO_TypeDef *)TPortAddress;
 8000592:	4b02      	ldr	r3, [pc, #8]	; (800059c <_ZN9stm32plus8GpioPortILm1073875968EINS_20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS3_18GpioPullUpDownTypeE0EILh13EEEEEE9initClockEv+0x20>)
      }
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40020c00 	.word	0x40020c00

080005a0 <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEEC1ERNS_12GpioPortBaseE>:
    /**
     * Constructor
     * @param port the port reference
     */

      DigitalOutputFeature(GpioPortBase& port)
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
        : Gpio(port) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4618      	mov	r0, r3
 80005ae:	6839      	ldr	r1, [r7, #0]
 80005b0:	f7ff ff14 	bl	80003dc <_ZN9stm32plus4GpioC1ERNS_12GpioPortBaseE>

        uint32_t pins;

        // recurse to get the pin mask

        pins=0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
        GpioPinMerge<TPins...>(pins);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f80f 	bl	80005e0 <_ZN9stm32plus12_GLOBAL__N_112GpioPinMergeILh13EEEvRm>

        // do the initialisation

        initialise(pins,TSpeed,TOutputType,TPullUpDownType);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	2300      	movs	r3, #0
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2202      	movs	r2, #2
 80005d0:	2301      	movs	r3, #1
 80005d2:	f000 f815 	bl	8000600 <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_>
      }
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_ZN9stm32plus12_GLOBAL__N_112GpioPinMergeILh13EEEvRm>:
    /**
     * Recursion termination condition
     */

    template<uint8_t TPin>
    void GpioPinMerge(uint32_t& pins) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
      pins|=1 << TPin;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	601a      	str	r2, [r3, #0]
    }
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_>:
       * @param TOutputType
       * @param TPullUpDownType
       * @param pinIds
       */

      void initialise(uint16_t pinIds,
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	4608      	mov	r0, r1
 800060a:	4611      	mov	r1, r2
 800060c:	461a      	mov	r2, r3
 800060e:	4603      	mov	r3, r0
 8000610:	807b      	strh	r3, [r7, #2]
 8000612:	460b      	mov	r3, r1
 8000614:	707b      	strb	r3, [r7, #1]
 8000616:	4613      	mov	r3, r2
 8000618:	703b      	strb	r3, [r7, #0]
        uint8_t i;
        GPIO_InitTypeDef init;

        (void)pullUpDownType;

        this->_pinIds=pinIds;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	887a      	ldrh	r2, [r7, #2]
 800061e:	811a      	strh	r2, [r3, #8]

        init.GPIO_Speed=speed;
 8000620:	787b      	ldrb	r3, [r7, #1]
 8000622:	747b      	strb	r3, [r7, #17]
        init.GPIO_Mode=GPIO_Mode_OUT;
 8000624:	2301      	movs	r3, #1
 8000626:	743b      	strb	r3, [r7, #16]
        init.GPIO_OType=outputType==Gpio::PUSH_PULL ? GPIO_OType_PP : GPIO_OType_OD;
 8000628:	783b      	ldrb	r3, [r7, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	bf14      	ite	ne
 800062e:	2301      	movne	r3, #1
 8000630:	2300      	moveq	r3, #0
 8000632:	b2db      	uxtb	r3, r3
 8000634:	74bb      	strb	r3, [r7, #18]
        init.GPIO_PuPd=pullUpDownType==PUPD_NONE ? GPIO_PuPd_NOPULL : (pullUpDownType==PUPD_UP ? GPIO_PuPd_UP : GPIO_PuPd_DOWN);
 8000636:	f897 3020 	ldrb.w	r3, [r7, #32]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_+0x4e>
 800063e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d101      	bne.n	800064a <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_+0x4a>
 8000646:	2301      	movs	r3, #1
 8000648:	e002      	b.n	8000650 <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_+0x50>
 800064a:	2302      	movs	r3, #2
 800064c:	e000      	b.n	8000650 <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_+0x50>
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
        init.GPIO_Pin=pinIds;
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	60fb      	str	r3, [r7, #12]

        GPIO_Init(_peripheralAddress,&init);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4610      	mov	r0, r2
 8000660:	4619      	mov	r1, r3
 8000662:	f000 f8b5 	bl	80007d0 <GPIO_Init>

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 8000666:	2300      	movs	r3, #0
 8000668:	75fb      	strb	r3, [r7, #23]
 800066a:	e013      	b.n	8000694 <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_+0x94>
          if((pinIds & (1<<i))!=0)
 800066c:	887a      	ldrh	r2, [r7, #2]
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	fa42 f303 	asr.w	r3, r2, r3
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_+0x8e>
            _portBase.setPinHandler(i,this);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6819      	ldr	r1, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7dfa      	ldrb	r2, [r7, #23]
 8000684:	4608      	mov	r0, r1
 8000686:	4611      	mov	r1, r2
 8000688:	461a      	mov	r2, r3
 800068a:	f7ff fe89 	bl	80003a0 <_ZN9stm32plus12GpioPortBase13setPinHandlerEhPNS_4GpioE>

        GPIO_Init(_peripheralAddress,&init);

        // set ourselves as the pin handler in the port base

        for(i=0;i<16;i++)
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	3301      	adds	r3, #1
 8000692:	75fb      	strb	r3, [r7, #23]
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	d9e8      	bls.n	800066c <_ZN9stm32plus20DigitalOutputFeatureIL17GPIOSpeed_TypeDef2ELNS_4Gpio14GpioOutputTypeE1ELNS2_18GpioPullUpDownTypeE0EILh13EEE10initialiseEtS1_S3_S4_+0x6c>
          if((pinIds & (1<<i))!=0)
            _portBase.setPinHandler(i,this);
      }
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <Reset_Handler>:
 80006a0:	2100      	movs	r1, #0
 80006a2:	e003      	b.n	80006ac <LoopCopyDataInit>

080006a4 <CopyDataInit>:
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <LoopFillZerobss+0x10>)
 80006a6:	585b      	ldr	r3, [r3, r1]
 80006a8:	5043      	str	r3, [r0, r1]
 80006aa:	3104      	adds	r1, #4

080006ac <LoopCopyDataInit>:
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <LoopFillZerobss+0x14>)
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <LoopFillZerobss+0x18>)
 80006b0:	1842      	adds	r2, r0, r1
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d3f6      	bcc.n	80006a4 <CopyDataInit>
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <LoopFillZerobss+0x1c>)
 80006b8:	e002      	b.n	80006c0 <LoopFillZerobss>

080006ba <FillZerobss>:
 80006ba:	2300      	movs	r3, #0
 80006bc:	f842 3b04 	str.w	r3, [r2], #4

080006c0 <LoopFillZerobss>:
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <LoopFillZerobss+0x20>)
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d3f9      	bcc.n	80006ba <FillZerobss>
 80006c6:	f7ff fd8d 	bl	80001e4 <SystemInit>
 80006ca:	f7ff ff17 	bl	80004fc <main>
 80006ce:	4770      	bx	lr
 80006d0:	08001218 	.word	0x08001218
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000844 	.word	0x20000844
 80006dc:	20000844 	.word	0x20000844
 80006e0:	200008a0 	.word	0x200008a0

080006e4 <ADC_IRQHandler>:
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	da0b      	bge.n	8000714 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80006fc:	490d      	ldr	r1, [pc, #52]	; (8000734 <NVIC_SetPriority+0x4c>)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	3b04      	subs	r3, #4
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	761a      	strb	r2, [r3, #24]
 8000712:	e009      	b.n	8000728 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000714:	4908      	ldr	r1, [pc, #32]	; (8000738 <NVIC_SetPriority+0x50>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440b      	add	r3, r1
 8000724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	e000e100 	.word	0xe000e100

0800073c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <SysTick_Config+0x40>)
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	3a01      	subs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800075a:	f04f 30ff 	mov.w	r0, #4294967295
 800075e:	210f      	movs	r1, #15
 8000760:	f7ff ffc2 	bl	80006e8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <_ZN9stm32plus16MillisecondTimer10initialiseEv>:

  /**
   * Initialise SysTick to tick at 1ms by initialising it with SystemCoreClock/1000.
   */

  void MillisecondTimer::initialise() {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    _counter=0;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x20>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
    SysTick_Config(SystemCoreClock / 1000);
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x24>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <_ZN9stm32plus16MillisecondTimer10initialiseEv+0x28>)
 8000790:	fba3 1302 	umull	r1, r3, r3, r2
 8000794:	099b      	lsrs	r3, r3, #6
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ffd0 	bl	800073c <SysTick_Config>
  }
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000864 	.word	0x20000864
 80007a4:	20000000 	.word	0x20000000
 80007a8:	10624dd3 	.word	0x10624dd3

080007ac <SysTick_Handler>:
/**
 * SysTick interrupt handler
 */

extern "C" {
  void __attribute__ ((interrupt("IRQ"))) SysTick_Handler(void) {
 80007ac:	4668      	mov	r0, sp
 80007ae:	f020 0107 	bic.w	r1, r0, #7
 80007b2:	468d      	mov	sp, r1
 80007b4:	b481      	push	{r0, r7}
 80007b6:	af00      	add	r7, sp, #0
    stm32plus::MillisecondTimer::_counter++;
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Handler+0x20>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	4b03      	ldr	r3, [pc, #12]	; (80007cc <SysTick_Handler+0x20>)
 80007c0:	601a      	str	r2, [r3, #0]
  }
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc81      	pop	{r0, r7}
 80007c6:	4685      	mov	sp, r0
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000864 	.word	0x20000864

080007d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	e076      	b.n	80008da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	2201      	movs	r2, #1
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d165      	bne.n	80008d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	2103      	movs	r1, #3
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	401a      	ands	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	4619      	mov	r1, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	431a      	orrs	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d003      	beq.n	8000846 <GPIO_Init+0x76>
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d12e      	bne.n	80008a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	2103      	movs	r1, #3
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	795b      	ldrb	r3, [r3, #5]
 8000864:	4619      	mov	r1, r3
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	431a      	orrs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	b29b      	uxth	r3, r3
 800087c:	2101      	movs	r1, #1
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	401a      	ands	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	799b      	ldrb	r3, [r3, #6]
 8000892:	4619      	mov	r1, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	b29b      	uxth	r3, r3
 8000898:	fa01 f303 	lsl.w	r3, r1, r3
 800089c:	b29b      	uxth	r3, r3
 800089e:	431a      	orrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68da      	ldr	r2, [r3, #12]
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2103      	movs	r1, #3
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	79db      	ldrb	r3, [r3, #7]
 80008c4:	4619      	mov	r1, r3
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d985      	bls.n	80007ec <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80008e0:	371c      	adds	r7, #28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	4613      	mov	r3, r2
 80008f6:	460a      	mov	r2, r1
 80008f8:	807a      	strh	r2, [r7, #2]
 80008fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80008fc:	787b      	ldrb	r3, [r7, #1]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	887a      	ldrh	r2, [r7, #2]
 8000906:	831a      	strh	r2, [r3, #24]
 8000908:	e002      	b.n	8000910 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	887a      	ldrh	r2, [r7, #2]
 800090e:	835a      	strh	r2, [r3, #26]
  }
}
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d006      	beq.n	800093c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <RCC_AHB1PeriphClockCmd+0x38>)
 8000930:	4a08      	ldr	r2, [pc, #32]	; (8000954 <RCC_AHB1PeriphClockCmd+0x38>)
 8000932:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	430a      	orrs	r2, r1
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
 800093a:	e006      	b.n	800094a <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <RCC_AHB1PeriphClockCmd+0x38>)
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <RCC_AHB1PeriphClockCmd+0x38>)
 8000940:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	43d2      	mvns	r2, r2
 8000946:	400a      	ands	r2, r1
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40023800 	.word	0x40023800

08000958 <malloc>:
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <malloc+0xc>)
 800095a:	4601      	mov	r1, r0
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	f000 b803 	b.w	8000968 <_malloc_r>
 8000962:	bf00      	nop
 8000964:	20000430 	.word	0x20000430

08000968 <_malloc_r>:
 8000968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800096c:	f101 050b 	add.w	r5, r1, #11
 8000970:	2d16      	cmp	r5, #22
 8000972:	b083      	sub	sp, #12
 8000974:	4606      	mov	r6, r0
 8000976:	d927      	bls.n	80009c8 <_malloc_r+0x60>
 8000978:	f035 0507 	bics.w	r5, r5, #7
 800097c:	f100 80b6 	bmi.w	8000aec <_malloc_r+0x184>
 8000980:	42a9      	cmp	r1, r5
 8000982:	f200 80b3 	bhi.w	8000aec <_malloc_r+0x184>
 8000986:	f000 fa7d 	bl	8000e84 <__malloc_lock>
 800098a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800098e:	d222      	bcs.n	80009d6 <_malloc_r+0x6e>
 8000990:	4fc2      	ldr	r7, [pc, #776]	; (8000c9c <_malloc_r+0x334>)
 8000992:	08e8      	lsrs	r0, r5, #3
 8000994:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8000998:	68dc      	ldr	r4, [r3, #12]
 800099a:	429c      	cmp	r4, r3
 800099c:	f000 81c9 	beq.w	8000d32 <_malloc_r+0x3ca>
 80009a0:	6863      	ldr	r3, [r4, #4]
 80009a2:	68e1      	ldr	r1, [r4, #12]
 80009a4:	68a5      	ldr	r5, [r4, #8]
 80009a6:	f023 0303 	bic.w	r3, r3, #3
 80009aa:	4423      	add	r3, r4
 80009ac:	4630      	mov	r0, r6
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	60e9      	str	r1, [r5, #12]
 80009b2:	f042 0201 	orr.w	r2, r2, #1
 80009b6:	608d      	str	r5, [r1, #8]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	f000 fa65 	bl	8000e88 <__malloc_unlock>
 80009be:	3408      	adds	r4, #8
 80009c0:	4620      	mov	r0, r4
 80009c2:	b003      	add	sp, #12
 80009c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c8:	2910      	cmp	r1, #16
 80009ca:	f200 808f 	bhi.w	8000aec <_malloc_r+0x184>
 80009ce:	f000 fa59 	bl	8000e84 <__malloc_lock>
 80009d2:	2510      	movs	r5, #16
 80009d4:	e7dc      	b.n	8000990 <_malloc_r+0x28>
 80009d6:	0a68      	lsrs	r0, r5, #9
 80009d8:	f000 808f 	beq.w	8000afa <_malloc_r+0x192>
 80009dc:	2804      	cmp	r0, #4
 80009de:	f200 8154 	bhi.w	8000c8a <_malloc_r+0x322>
 80009e2:	09a8      	lsrs	r0, r5, #6
 80009e4:	3038      	adds	r0, #56	; 0x38
 80009e6:	0041      	lsls	r1, r0, #1
 80009e8:	4fac      	ldr	r7, [pc, #688]	; (8000c9c <_malloc_r+0x334>)
 80009ea:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80009ee:	68cc      	ldr	r4, [r1, #12]
 80009f0:	42a1      	cmp	r1, r4
 80009f2:	d106      	bne.n	8000a02 <_malloc_r+0x9a>
 80009f4:	e00c      	b.n	8000a10 <_malloc_r+0xa8>
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	f280 8082 	bge.w	8000b00 <_malloc_r+0x198>
 80009fc:	68e4      	ldr	r4, [r4, #12]
 80009fe:	42a1      	cmp	r1, r4
 8000a00:	d006      	beq.n	8000a10 <_malloc_r+0xa8>
 8000a02:	6863      	ldr	r3, [r4, #4]
 8000a04:	f023 0303 	bic.w	r3, r3, #3
 8000a08:	1b5a      	subs	r2, r3, r5
 8000a0a:	2a0f      	cmp	r2, #15
 8000a0c:	ddf3      	ble.n	80009f6 <_malloc_r+0x8e>
 8000a0e:	3801      	subs	r0, #1
 8000a10:	3001      	adds	r0, #1
 8000a12:	49a2      	ldr	r1, [pc, #648]	; (8000c9c <_malloc_r+0x334>)
 8000a14:	693c      	ldr	r4, [r7, #16]
 8000a16:	f101 0e08 	add.w	lr, r1, #8
 8000a1a:	4574      	cmp	r4, lr
 8000a1c:	f000 817e 	beq.w	8000d1c <_malloc_r+0x3b4>
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	f023 0303 	bic.w	r3, r3, #3
 8000a26:	1b5a      	subs	r2, r3, r5
 8000a28:	2a0f      	cmp	r2, #15
 8000a2a:	f300 8164 	bgt.w	8000cf6 <_malloc_r+0x38e>
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	f8c1 e014 	str.w	lr, [r1, #20]
 8000a34:	f8c1 e010 	str.w	lr, [r1, #16]
 8000a38:	da73      	bge.n	8000b22 <_malloc_r+0x1ba>
 8000a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a3e:	f080 8139 	bcs.w	8000cb4 <_malloc_r+0x34c>
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8000a48:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8000a4c:	684a      	ldr	r2, [r1, #4]
 8000a4e:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8000a52:	f8c4 9008 	str.w	r9, [r4, #8]
 8000a56:	2301      	movs	r3, #1
 8000a58:	fa03 f30c 	lsl.w	r3, r3, ip
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	f8c4 800c 	str.w	r8, [r4, #12]
 8000a62:	604b      	str	r3, [r1, #4]
 8000a64:	f8c8 4008 	str.w	r4, [r8, #8]
 8000a68:	f8c9 400c 	str.w	r4, [r9, #12]
 8000a6c:	1082      	asrs	r2, r0, #2
 8000a6e:	2401      	movs	r4, #1
 8000a70:	4094      	lsls	r4, r2
 8000a72:	429c      	cmp	r4, r3
 8000a74:	d862      	bhi.n	8000b3c <_malloc_r+0x1d4>
 8000a76:	4223      	tst	r3, r4
 8000a78:	d106      	bne.n	8000a88 <_malloc_r+0x120>
 8000a7a:	f020 0003 	bic.w	r0, r0, #3
 8000a7e:	0064      	lsls	r4, r4, #1
 8000a80:	4223      	tst	r3, r4
 8000a82:	f100 0004 	add.w	r0, r0, #4
 8000a86:	d0fa      	beq.n	8000a7e <_malloc_r+0x116>
 8000a88:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8000a8c:	46c4      	mov	ip, r8
 8000a8e:	4681      	mov	r9, r0
 8000a90:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8000a94:	459c      	cmp	ip, r3
 8000a96:	d107      	bne.n	8000aa8 <_malloc_r+0x140>
 8000a98:	e142      	b.n	8000d20 <_malloc_r+0x3b8>
 8000a9a:	2900      	cmp	r1, #0
 8000a9c:	f280 8152 	bge.w	8000d44 <_malloc_r+0x3dc>
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	459c      	cmp	ip, r3
 8000aa4:	f000 813c 	beq.w	8000d20 <_malloc_r+0x3b8>
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	f022 0203 	bic.w	r2, r2, #3
 8000aae:	1b51      	subs	r1, r2, r5
 8000ab0:	290f      	cmp	r1, #15
 8000ab2:	ddf2      	ble.n	8000a9a <_malloc_r+0x132>
 8000ab4:	461c      	mov	r4, r3
 8000ab6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000aba:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8000abe:	195a      	adds	r2, r3, r5
 8000ac0:	f045 0901 	orr.w	r9, r5, #1
 8000ac4:	f041 0501 	orr.w	r5, r1, #1
 8000ac8:	f8c3 9004 	str.w	r9, [r3, #4]
 8000acc:	4630      	mov	r0, r6
 8000ace:	f8c8 c00c 	str.w	ip, [r8, #12]
 8000ad2:	f8cc 8008 	str.w	r8, [ip, #8]
 8000ad6:	617a      	str	r2, [r7, #20]
 8000ad8:	613a      	str	r2, [r7, #16]
 8000ada:	f8c2 e00c 	str.w	lr, [r2, #12]
 8000ade:	f8c2 e008 	str.w	lr, [r2, #8]
 8000ae2:	6055      	str	r5, [r2, #4]
 8000ae4:	5051      	str	r1, [r2, r1]
 8000ae6:	f000 f9cf 	bl	8000e88 <__malloc_unlock>
 8000aea:	e769      	b.n	80009c0 <_malloc_r+0x58>
 8000aec:	2400      	movs	r4, #0
 8000aee:	230c      	movs	r3, #12
 8000af0:	4620      	mov	r0, r4
 8000af2:	6033      	str	r3, [r6, #0]
 8000af4:	b003      	add	sp, #12
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afa:	217e      	movs	r1, #126	; 0x7e
 8000afc:	203f      	movs	r0, #63	; 0x3f
 8000afe:	e773      	b.n	80009e8 <_malloc_r+0x80>
 8000b00:	4423      	add	r3, r4
 8000b02:	68e1      	ldr	r1, [r4, #12]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68a5      	ldr	r5, [r4, #8]
 8000b08:	f042 0201 	orr.w	r2, r2, #1
 8000b0c:	60e9      	str	r1, [r5, #12]
 8000b0e:	4630      	mov	r0, r6
 8000b10:	608d      	str	r5, [r1, #8]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	f000 f9b8 	bl	8000e88 <__malloc_unlock>
 8000b18:	3408      	adds	r4, #8
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	b003      	add	sp, #12
 8000b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b22:	4423      	add	r3, r4
 8000b24:	4630      	mov	r0, r6
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	f042 0201 	orr.w	r2, r2, #1
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	f000 f9ab 	bl	8000e88 <__malloc_unlock>
 8000b32:	3408      	adds	r4, #8
 8000b34:	4620      	mov	r0, r4
 8000b36:	b003      	add	sp, #12
 8000b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3c:	68bc      	ldr	r4, [r7, #8]
 8000b3e:	6863      	ldr	r3, [r4, #4]
 8000b40:	f023 0803 	bic.w	r8, r3, #3
 8000b44:	4545      	cmp	r5, r8
 8000b46:	d804      	bhi.n	8000b52 <_malloc_r+0x1ea>
 8000b48:	ebc5 0308 	rsb	r3, r5, r8
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	f300 808c 	bgt.w	8000c6a <_malloc_r+0x302>
 8000b52:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <_malloc_r+0x338>)
 8000b54:	f8df a158 	ldr.w	sl, [pc, #344]	; 8000cb0 <_malloc_r+0x348>
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	f8da 3000 	ldr.w	r3, [sl]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	442a      	add	r2, r5
 8000b62:	eb04 0b08 	add.w	fp, r4, r8
 8000b66:	f000 8150 	beq.w	8000e0a <_malloc_r+0x4a2>
 8000b6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000b6e:	320f      	adds	r2, #15
 8000b70:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8000b74:	f022 020f 	bic.w	r2, r2, #15
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	9201      	str	r2, [sp, #4]
 8000b7e:	f000 f985 	bl	8000e8c <_sbrk_r>
 8000b82:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000b86:	4681      	mov	r9, r0
 8000b88:	9a01      	ldr	r2, [sp, #4]
 8000b8a:	f000 80f5 	beq.w	8000d78 <_malloc_r+0x410>
 8000b8e:	4583      	cmp	fp, r0
 8000b90:	f200 80ef 	bhi.w	8000d72 <_malloc_r+0x40a>
 8000b94:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <_malloc_r+0x33c>)
 8000b96:	6819      	ldr	r1, [r3, #0]
 8000b98:	45cb      	cmp	fp, r9
 8000b9a:	4411      	add	r1, r2
 8000b9c:	6019      	str	r1, [r3, #0]
 8000b9e:	f000 813d 	beq.w	8000e1c <_malloc_r+0x4b4>
 8000ba2:	f8da 0000 	ldr.w	r0, [sl]
 8000ba6:	f8df e108 	ldr.w	lr, [pc, #264]	; 8000cb0 <_malloc_r+0x348>
 8000baa:	3001      	adds	r0, #1
 8000bac:	bf1b      	ittet	ne
 8000bae:	ebcb 0b09 	rsbne	fp, fp, r9
 8000bb2:	4459      	addne	r1, fp
 8000bb4:	f8ce 9000 	streq.w	r9, [lr]
 8000bb8:	6019      	strne	r1, [r3, #0]
 8000bba:	f019 0107 	ands.w	r1, r9, #7
 8000bbe:	f000 8107 	beq.w	8000dd0 <_malloc_r+0x468>
 8000bc2:	f1c1 0008 	rsb	r0, r1, #8
 8000bc6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8000bca:	4481      	add	r9, r0
 8000bcc:	3108      	adds	r1, #8
 8000bce:	444a      	add	r2, r9
 8000bd0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000bd4:	ebc2 0a01 	rsb	sl, r2, r1
 8000bd8:	4651      	mov	r1, sl
 8000bda:	4630      	mov	r0, r6
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	f000 f955 	bl	8000e8c <_sbrk_r>
 8000be2:	1c43      	adds	r3, r0, #1
 8000be4:	9b01      	ldr	r3, [sp, #4]
 8000be6:	f000 8127 	beq.w	8000e38 <_malloc_r+0x4d0>
 8000bea:	ebc9 0200 	rsb	r2, r9, r0
 8000bee:	4452      	add	r2, sl
 8000bf0:	f042 0201 	orr.w	r2, r2, #1
 8000bf4:	6819      	ldr	r1, [r3, #0]
 8000bf6:	f8c7 9008 	str.w	r9, [r7, #8]
 8000bfa:	4451      	add	r1, sl
 8000bfc:	42bc      	cmp	r4, r7
 8000bfe:	f8c9 2004 	str.w	r2, [r9, #4]
 8000c02:	6019      	str	r1, [r3, #0]
 8000c04:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8000ca4 <_malloc_r+0x33c>
 8000c08:	d016      	beq.n	8000c38 <_malloc_r+0x2d0>
 8000c0a:	f1b8 0f0f 	cmp.w	r8, #15
 8000c0e:	f240 80e2 	bls.w	8000dd6 <_malloc_r+0x46e>
 8000c12:	6862      	ldr	r2, [r4, #4]
 8000c14:	f1a8 030c 	sub.w	r3, r8, #12
 8000c18:	f023 0307 	bic.w	r3, r3, #7
 8000c1c:	18e0      	adds	r0, r4, r3
 8000c1e:	f002 0201 	and.w	r2, r2, #1
 8000c22:	f04f 0e05 	mov.w	lr, #5
 8000c26:	431a      	orrs	r2, r3
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	6062      	str	r2, [r4, #4]
 8000c2c:	f8c0 e004 	str.w	lr, [r0, #4]
 8000c30:	f8c0 e008 	str.w	lr, [r0, #8]
 8000c34:	f200 8104 	bhi.w	8000e40 <_malloc_r+0x4d8>
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <_malloc_r+0x340>)
 8000c3a:	68bc      	ldr	r4, [r7, #8]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4291      	cmp	r1, r2
 8000c40:	bf88      	it	hi
 8000c42:	6019      	strhi	r1, [r3, #0]
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <_malloc_r+0x344>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4291      	cmp	r1, r2
 8000c4a:	6862      	ldr	r2, [r4, #4]
 8000c4c:	bf88      	it	hi
 8000c4e:	6019      	strhi	r1, [r3, #0]
 8000c50:	f022 0203 	bic.w	r2, r2, #3
 8000c54:	4295      	cmp	r5, r2
 8000c56:	eba2 0305 	sub.w	r3, r2, r5
 8000c5a:	d801      	bhi.n	8000c60 <_malloc_r+0x2f8>
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	dc04      	bgt.n	8000c6a <_malloc_r+0x302>
 8000c60:	4630      	mov	r0, r6
 8000c62:	f000 f911 	bl	8000e88 <__malloc_unlock>
 8000c66:	2400      	movs	r4, #0
 8000c68:	e6aa      	b.n	80009c0 <_malloc_r+0x58>
 8000c6a:	1962      	adds	r2, r4, r5
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f045 0501 	orr.w	r5, r5, #1
 8000c74:	6065      	str	r5, [r4, #4]
 8000c76:	4630      	mov	r0, r6
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	6053      	str	r3, [r2, #4]
 8000c7c:	f000 f904 	bl	8000e88 <__malloc_unlock>
 8000c80:	3408      	adds	r4, #8
 8000c82:	4620      	mov	r0, r4
 8000c84:	b003      	add	sp, #12
 8000c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c8a:	2814      	cmp	r0, #20
 8000c8c:	d969      	bls.n	8000d62 <_malloc_r+0x3fa>
 8000c8e:	2854      	cmp	r0, #84	; 0x54
 8000c90:	f200 8097 	bhi.w	8000dc2 <_malloc_r+0x45a>
 8000c94:	0b28      	lsrs	r0, r5, #12
 8000c96:	306e      	adds	r0, #110	; 0x6e
 8000c98:	0041      	lsls	r1, r0, #1
 8000c9a:	e6a5      	b.n	80009e8 <_malloc_r+0x80>
 8000c9c:	20000434 	.word	0x20000434
 8000ca0:	20000870 	.word	0x20000870
 8000ca4:	20000874 	.word	0x20000874
 8000ca8:	2000086c 	.word	0x2000086c
 8000cac:	20000868 	.word	0x20000868
 8000cb0:	20000840 	.word	0x20000840
 8000cb4:	0a5a      	lsrs	r2, r3, #9
 8000cb6:	2a04      	cmp	r2, #4
 8000cb8:	d956      	bls.n	8000d68 <_malloc_r+0x400>
 8000cba:	2a14      	cmp	r2, #20
 8000cbc:	f200 80a7 	bhi.w	8000e0e <_malloc_r+0x4a6>
 8000cc0:	325b      	adds	r2, #91	; 0x5b
 8000cc2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8000cc6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8000cca:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000e80 <_malloc_r+0x518>
 8000cce:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8000cd2:	4561      	cmp	r1, ip
 8000cd4:	f000 8085 	beq.w	8000de2 <_malloc_r+0x47a>
 8000cd8:	684a      	ldr	r2, [r1, #4]
 8000cda:	f022 0203 	bic.w	r2, r2, #3
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d202      	bcs.n	8000ce8 <_malloc_r+0x380>
 8000ce2:	6889      	ldr	r1, [r1, #8]
 8000ce4:	458c      	cmp	ip, r1
 8000ce6:	d1f7      	bne.n	8000cd8 <_malloc_r+0x370>
 8000ce8:	68ca      	ldr	r2, [r1, #12]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60e2      	str	r2, [r4, #12]
 8000cee:	60a1      	str	r1, [r4, #8]
 8000cf0:	6094      	str	r4, [r2, #8]
 8000cf2:	60cc      	str	r4, [r1, #12]
 8000cf4:	e6ba      	b.n	8000a6c <_malloc_r+0x104>
 8000cf6:	1963      	adds	r3, r4, r5
 8000cf8:	f042 0701 	orr.w	r7, r2, #1
 8000cfc:	f045 0501 	orr.w	r5, r5, #1
 8000d00:	6065      	str	r5, [r4, #4]
 8000d02:	4630      	mov	r0, r6
 8000d04:	614b      	str	r3, [r1, #20]
 8000d06:	610b      	str	r3, [r1, #16]
 8000d08:	f8c3 e00c 	str.w	lr, [r3, #12]
 8000d0c:	f8c3 e008 	str.w	lr, [r3, #8]
 8000d10:	605f      	str	r7, [r3, #4]
 8000d12:	509a      	str	r2, [r3, r2]
 8000d14:	3408      	adds	r4, #8
 8000d16:	f000 f8b7 	bl	8000e88 <__malloc_unlock>
 8000d1a:	e651      	b.n	80009c0 <_malloc_r+0x58>
 8000d1c:	684b      	ldr	r3, [r1, #4]
 8000d1e:	e6a5      	b.n	8000a6c <_malloc_r+0x104>
 8000d20:	f109 0901 	add.w	r9, r9, #1
 8000d24:	f019 0f03 	tst.w	r9, #3
 8000d28:	f10c 0c08 	add.w	ip, ip, #8
 8000d2c:	f47f aeb0 	bne.w	8000a90 <_malloc_r+0x128>
 8000d30:	e02b      	b.n	8000d8a <_malloc_r+0x422>
 8000d32:	f104 0308 	add.w	r3, r4, #8
 8000d36:	6964      	ldr	r4, [r4, #20]
 8000d38:	42a3      	cmp	r3, r4
 8000d3a:	bf08      	it	eq
 8000d3c:	3002      	addeq	r0, #2
 8000d3e:	f43f ae68 	beq.w	8000a12 <_malloc_r+0xaa>
 8000d42:	e62d      	b.n	80009a0 <_malloc_r+0x38>
 8000d44:	441a      	add	r2, r3
 8000d46:	461c      	mov	r4, r3
 8000d48:	6851      	ldr	r1, [r2, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8000d50:	f041 0101 	orr.w	r1, r1, #1
 8000d54:	6051      	str	r1, [r2, #4]
 8000d56:	4630      	mov	r0, r6
 8000d58:	60eb      	str	r3, [r5, #12]
 8000d5a:	609d      	str	r5, [r3, #8]
 8000d5c:	f000 f894 	bl	8000e88 <__malloc_unlock>
 8000d60:	e62e      	b.n	80009c0 <_malloc_r+0x58>
 8000d62:	305b      	adds	r0, #91	; 0x5b
 8000d64:	0041      	lsls	r1, r0, #1
 8000d66:	e63f      	b.n	80009e8 <_malloc_r+0x80>
 8000d68:	099a      	lsrs	r2, r3, #6
 8000d6a:	3238      	adds	r2, #56	; 0x38
 8000d6c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8000d70:	e7a9      	b.n	8000cc6 <_malloc_r+0x35e>
 8000d72:	42bc      	cmp	r4, r7
 8000d74:	f43f af0e 	beq.w	8000b94 <_malloc_r+0x22c>
 8000d78:	68bc      	ldr	r4, [r7, #8]
 8000d7a:	6862      	ldr	r2, [r4, #4]
 8000d7c:	f022 0203 	bic.w	r2, r2, #3
 8000d80:	e768      	b.n	8000c54 <_malloc_r+0x2ec>
 8000d82:	f8d8 8000 	ldr.w	r8, [r8]
 8000d86:	4598      	cmp	r8, r3
 8000d88:	d177      	bne.n	8000e7a <_malloc_r+0x512>
 8000d8a:	f010 0f03 	tst.w	r0, #3
 8000d8e:	f1a8 0308 	sub.w	r3, r8, #8
 8000d92:	f100 30ff 	add.w	r0, r0, #4294967295
 8000d96:	d1f4      	bne.n	8000d82 <_malloc_r+0x41a>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	ea23 0304 	bic.w	r3, r3, r4
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	0064      	lsls	r4, r4, #1
 8000da2:	429c      	cmp	r4, r3
 8000da4:	f63f aeca 	bhi.w	8000b3c <_malloc_r+0x1d4>
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	f43f aec7 	beq.w	8000b3c <_malloc_r+0x1d4>
 8000dae:	4223      	tst	r3, r4
 8000db0:	4648      	mov	r0, r9
 8000db2:	f47f ae69 	bne.w	8000a88 <_malloc_r+0x120>
 8000db6:	0064      	lsls	r4, r4, #1
 8000db8:	4223      	tst	r3, r4
 8000dba:	f100 0004 	add.w	r0, r0, #4
 8000dbe:	d0fa      	beq.n	8000db6 <_malloc_r+0x44e>
 8000dc0:	e662      	b.n	8000a88 <_malloc_r+0x120>
 8000dc2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8000dc6:	d818      	bhi.n	8000dfa <_malloc_r+0x492>
 8000dc8:	0be8      	lsrs	r0, r5, #15
 8000dca:	3077      	adds	r0, #119	; 0x77
 8000dcc:	0041      	lsls	r1, r0, #1
 8000dce:	e60b      	b.n	80009e8 <_malloc_r+0x80>
 8000dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd4:	e6fb      	b.n	8000bce <_malloc_r+0x266>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f8c9 3004 	str.w	r3, [r9, #4]
 8000ddc:	464c      	mov	r4, r9
 8000dde:	2200      	movs	r2, #0
 8000de0:	e738      	b.n	8000c54 <_malloc_r+0x2ec>
 8000de2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000de6:	1092      	asrs	r2, r2, #2
 8000de8:	f04f 0c01 	mov.w	ip, #1
 8000dec:	fa0c f202 	lsl.w	r2, ip, r2
 8000df0:	4313      	orrs	r3, r2
 8000df2:	f8c8 3004 	str.w	r3, [r8, #4]
 8000df6:	460a      	mov	r2, r1
 8000df8:	e778      	b.n	8000cec <_malloc_r+0x384>
 8000dfa:	f240 5354 	movw	r3, #1364	; 0x554
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d817      	bhi.n	8000e32 <_malloc_r+0x4ca>
 8000e02:	0ca8      	lsrs	r0, r5, #18
 8000e04:	307c      	adds	r0, #124	; 0x7c
 8000e06:	0041      	lsls	r1, r0, #1
 8000e08:	e5ee      	b.n	80009e8 <_malloc_r+0x80>
 8000e0a:	3210      	adds	r2, #16
 8000e0c:	e6b4      	b.n	8000b78 <_malloc_r+0x210>
 8000e0e:	2a54      	cmp	r2, #84	; 0x54
 8000e10:	d81e      	bhi.n	8000e50 <_malloc_r+0x4e8>
 8000e12:	0b1a      	lsrs	r2, r3, #12
 8000e14:	326e      	adds	r2, #110	; 0x6e
 8000e16:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8000e1a:	e754      	b.n	8000cc6 <_malloc_r+0x35e>
 8000e1c:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8000e20:	2800      	cmp	r0, #0
 8000e22:	f47f aebe 	bne.w	8000ba2 <_malloc_r+0x23a>
 8000e26:	4442      	add	r2, r8
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	e702      	b.n	8000c38 <_malloc_r+0x2d0>
 8000e32:	21fc      	movs	r1, #252	; 0xfc
 8000e34:	207e      	movs	r0, #126	; 0x7e
 8000e36:	e5d7      	b.n	80009e8 <_malloc_r+0x80>
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f04f 0a00 	mov.w	sl, #0
 8000e3e:	e6d9      	b.n	8000bf4 <_malloc_r+0x28c>
 8000e40:	f104 0108 	add.w	r1, r4, #8
 8000e44:	4630      	mov	r0, r6
 8000e46:	f000 f8a7 	bl	8000f98 <_free_r>
 8000e4a:	f8da 1000 	ldr.w	r1, [sl]
 8000e4e:	e6f3      	b.n	8000c38 <_malloc_r+0x2d0>
 8000e50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8000e54:	d804      	bhi.n	8000e60 <_malloc_r+0x4f8>
 8000e56:	0bda      	lsrs	r2, r3, #15
 8000e58:	3277      	adds	r2, #119	; 0x77
 8000e5a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8000e5e:	e732      	b.n	8000cc6 <_malloc_r+0x35e>
 8000e60:	f240 5154 	movw	r1, #1364	; 0x554
 8000e64:	428a      	cmp	r2, r1
 8000e66:	d804      	bhi.n	8000e72 <_malloc_r+0x50a>
 8000e68:	0c9a      	lsrs	r2, r3, #18
 8000e6a:	327c      	adds	r2, #124	; 0x7c
 8000e6c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8000e70:	e729      	b.n	8000cc6 <_malloc_r+0x35e>
 8000e72:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8000e76:	227e      	movs	r2, #126	; 0x7e
 8000e78:	e725      	b.n	8000cc6 <_malloc_r+0x35e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	e790      	b.n	8000da0 <_malloc_r+0x438>
 8000e7e:	bf00      	nop
 8000e80:	20000434 	.word	0x20000434

08000e84 <__malloc_lock>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <__malloc_unlock>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <_sbrk_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4c07      	ldr	r4, [pc, #28]	; (8000eac <_sbrk_r+0x20>)
 8000e90:	2300      	movs	r3, #0
 8000e92:	4605      	mov	r5, r0
 8000e94:	4608      	mov	r0, r1
 8000e96:	6023      	str	r3, [r4, #0]
 8000e98:	f7ff fa52 	bl	8000340 <_sbrk>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	d000      	beq.n	8000ea2 <_sbrk_r+0x16>
 8000ea0:	bd38      	pop	{r3, r4, r5, pc}
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0fb      	beq.n	8000ea0 <_sbrk_r+0x14>
 8000ea8:	602b      	str	r3, [r5, #0]
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
 8000eac:	2000089c 	.word	0x2000089c

08000eb0 <register_fini>:
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <register_fini+0xc>)
 8000eb2:	b113      	cbz	r3, 8000eba <register_fini+0xa>
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <register_fini+0x10>)
 8000eb6:	f000 b805 	b.w	8000ec4 <atexit>
 8000eba:	4770      	bx	lr
 8000ebc:	00000000 	.word	0x00000000
 8000ec0:	08000ed1 	.word	0x08000ed1

08000ec4 <atexit>:
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f000 b93c 	b.w	8001148 <__register_exitproc>

08000ed0 <__libc_fini_array>:
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <__libc_fini_array+0x24>)
 8000ed4:	4d08      	ldr	r5, [pc, #32]	; (8000ef8 <__libc_fini_array+0x28>)
 8000ed6:	1aed      	subs	r5, r5, r3
 8000ed8:	10ac      	asrs	r4, r5, #2
 8000eda:	bf18      	it	ne
 8000edc:	18ed      	addne	r5, r5, r3
 8000ede:	d005      	beq.n	8000eec <__libc_fini_array+0x1c>
 8000ee0:	3c01      	subs	r4, #1
 8000ee2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8000ee6:	4798      	blx	r3
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	d1f9      	bne.n	8000ee0 <__libc_fini_array+0x10>
 8000eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ef0:	f000 b986 	b.w	8001200 <_fini>
 8000ef4:	08001214 	.word	0x08001214
 8000ef8:	08001218 	.word	0x08001218

08000efc <_malloc_trim_r>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	4f23      	ldr	r7, [pc, #140]	; (8000f8c <_malloc_trim_r+0x90>)
 8000f00:	460c      	mov	r4, r1
 8000f02:	4606      	mov	r6, r0
 8000f04:	f7ff ffbe 	bl	8000e84 <__malloc_lock>
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	685d      	ldr	r5, [r3, #4]
 8000f0c:	f025 0503 	bic.w	r5, r5, #3
 8000f10:	1b29      	subs	r1, r5, r4
 8000f12:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8000f16:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8000f1a:	f021 010f 	bic.w	r1, r1, #15
 8000f1e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8000f22:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8000f26:	db07      	blt.n	8000f38 <_malloc_trim_r+0x3c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f7ff ffae 	bl	8000e8c <_sbrk_r>
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	442b      	add	r3, r5
 8000f34:	4298      	cmp	r0, r3
 8000f36:	d004      	beq.n	8000f42 <_malloc_trim_r+0x46>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f7ff ffa5 	bl	8000e88 <__malloc_unlock>
 8000f3e:	2000      	movs	r0, #0
 8000f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f42:	4630      	mov	r0, r6
 8000f44:	4261      	negs	r1, r4
 8000f46:	f7ff ffa1 	bl	8000e8c <_sbrk_r>
 8000f4a:	3001      	adds	r0, #1
 8000f4c:	d00d      	beq.n	8000f6a <_malloc_trim_r+0x6e>
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_malloc_trim_r+0x94>)
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	6819      	ldr	r1, [r3, #0]
 8000f54:	1b2d      	subs	r5, r5, r4
 8000f56:	f045 0501 	orr.w	r5, r5, #1
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	1b09      	subs	r1, r1, r4
 8000f5e:	6055      	str	r5, [r2, #4]
 8000f60:	6019      	str	r1, [r3, #0]
 8000f62:	f7ff ff91 	bl	8000e88 <__malloc_unlock>
 8000f66:	2001      	movs	r0, #1
 8000f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f7ff ff8d 	bl	8000e8c <_sbrk_r>
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	1a83      	subs	r3, r0, r2
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	ddde      	ble.n	8000f38 <_malloc_trim_r+0x3c>
 8000f7a:	4c06      	ldr	r4, [pc, #24]	; (8000f94 <_malloc_trim_r+0x98>)
 8000f7c:	4904      	ldr	r1, [pc, #16]	; (8000f90 <_malloc_trim_r+0x94>)
 8000f7e:	6824      	ldr	r4, [r4, #0]
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	1b00      	subs	r0, r0, r4
 8000f86:	6053      	str	r3, [r2, #4]
 8000f88:	6008      	str	r0, [r1, #0]
 8000f8a:	e7d5      	b.n	8000f38 <_malloc_trim_r+0x3c>
 8000f8c:	20000434 	.word	0x20000434
 8000f90:	20000874 	.word	0x20000874
 8000f94:	20000840 	.word	0x20000840

08000f98 <_free_r>:
 8000f98:	2900      	cmp	r1, #0
 8000f9a:	d04e      	beq.n	800103a <_free_r+0xa2>
 8000f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa0:	460c      	mov	r4, r1
 8000fa2:	4680      	mov	r8, r0
 8000fa4:	f7ff ff6e 	bl	8000e84 <__malloc_lock>
 8000fa8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8000fac:	4962      	ldr	r1, [pc, #392]	; (8001138 <_free_r+0x1a0>)
 8000fae:	f027 0201 	bic.w	r2, r7, #1
 8000fb2:	f1a4 0508 	sub.w	r5, r4, #8
 8000fb6:	18ab      	adds	r3, r5, r2
 8000fb8:	688e      	ldr	r6, [r1, #8]
 8000fba:	6858      	ldr	r0, [r3, #4]
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	f020 0003 	bic.w	r0, r0, #3
 8000fc2:	d05a      	beq.n	800107a <_free_r+0xe2>
 8000fc4:	07fe      	lsls	r6, r7, #31
 8000fc6:	6058      	str	r0, [r3, #4]
 8000fc8:	d40b      	bmi.n	8000fe2 <_free_r+0x4a>
 8000fca:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8000fce:	1bed      	subs	r5, r5, r7
 8000fd0:	f101 0e08 	add.w	lr, r1, #8
 8000fd4:	68ac      	ldr	r4, [r5, #8]
 8000fd6:	4574      	cmp	r4, lr
 8000fd8:	443a      	add	r2, r7
 8000fda:	d067      	beq.n	80010ac <_free_r+0x114>
 8000fdc:	68ef      	ldr	r7, [r5, #12]
 8000fde:	60e7      	str	r7, [r4, #12]
 8000fe0:	60bc      	str	r4, [r7, #8]
 8000fe2:	181c      	adds	r4, r3, r0
 8000fe4:	6864      	ldr	r4, [r4, #4]
 8000fe6:	07e4      	lsls	r4, r4, #31
 8000fe8:	d40c      	bmi.n	8001004 <_free_r+0x6c>
 8000fea:	4f54      	ldr	r7, [pc, #336]	; (800113c <_free_r+0x1a4>)
 8000fec:	689c      	ldr	r4, [r3, #8]
 8000fee:	42bc      	cmp	r4, r7
 8000ff0:	4402      	add	r2, r0
 8000ff2:	d07c      	beq.n	80010ee <_free_r+0x156>
 8000ff4:	68d8      	ldr	r0, [r3, #12]
 8000ff6:	60e0      	str	r0, [r4, #12]
 8000ff8:	f042 0301 	orr.w	r3, r2, #1
 8000ffc:	6084      	str	r4, [r0, #8]
 8000ffe:	606b      	str	r3, [r5, #4]
 8001000:	50aa      	str	r2, [r5, r2]
 8001002:	e003      	b.n	800100c <_free_r+0x74>
 8001004:	f042 0301 	orr.w	r3, r2, #1
 8001008:	606b      	str	r3, [r5, #4]
 800100a:	50aa      	str	r2, [r5, r2]
 800100c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001010:	d214      	bcs.n	800103c <_free_r+0xa4>
 8001012:	08d2      	lsrs	r2, r2, #3
 8001014:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8001018:	6848      	ldr	r0, [r1, #4]
 800101a:	689f      	ldr	r7, [r3, #8]
 800101c:	60af      	str	r7, [r5, #8]
 800101e:	1092      	asrs	r2, r2, #2
 8001020:	2401      	movs	r4, #1
 8001022:	fa04 f202 	lsl.w	r2, r4, r2
 8001026:	4310      	orrs	r0, r2
 8001028:	60eb      	str	r3, [r5, #12]
 800102a:	6048      	str	r0, [r1, #4]
 800102c:	609d      	str	r5, [r3, #8]
 800102e:	60fd      	str	r5, [r7, #12]
 8001030:	4640      	mov	r0, r8
 8001032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001036:	f7ff bf27 	b.w	8000e88 <__malloc_unlock>
 800103a:	4770      	bx	lr
 800103c:	0a53      	lsrs	r3, r2, #9
 800103e:	2b04      	cmp	r3, #4
 8001040:	d847      	bhi.n	80010d2 <_free_r+0x13a>
 8001042:	0993      	lsrs	r3, r2, #6
 8001044:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001048:	0060      	lsls	r0, r4, #1
 800104a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800104e:	493a      	ldr	r1, [pc, #232]	; (8001138 <_free_r+0x1a0>)
 8001050:	6883      	ldr	r3, [r0, #8]
 8001052:	4283      	cmp	r3, r0
 8001054:	d043      	beq.n	80010de <_free_r+0x146>
 8001056:	6859      	ldr	r1, [r3, #4]
 8001058:	f021 0103 	bic.w	r1, r1, #3
 800105c:	4291      	cmp	r1, r2
 800105e:	d902      	bls.n	8001066 <_free_r+0xce>
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	4298      	cmp	r0, r3
 8001064:	d1f7      	bne.n	8001056 <_free_r+0xbe>
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	60ea      	str	r2, [r5, #12]
 800106a:	60ab      	str	r3, [r5, #8]
 800106c:	4640      	mov	r0, r8
 800106e:	6095      	str	r5, [r2, #8]
 8001070:	60dd      	str	r5, [r3, #12]
 8001072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001076:	f7ff bf07 	b.w	8000e88 <__malloc_unlock>
 800107a:	07ff      	lsls	r7, r7, #31
 800107c:	4402      	add	r2, r0
 800107e:	d407      	bmi.n	8001090 <_free_r+0xf8>
 8001080:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8001084:	1aed      	subs	r5, r5, r3
 8001086:	441a      	add	r2, r3
 8001088:	68a8      	ldr	r0, [r5, #8]
 800108a:	68eb      	ldr	r3, [r5, #12]
 800108c:	60c3      	str	r3, [r0, #12]
 800108e:	6098      	str	r0, [r3, #8]
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <_free_r+0x1a8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 0001 	orr.w	r0, r2, #1
 8001098:	429a      	cmp	r2, r3
 800109a:	6068      	str	r0, [r5, #4]
 800109c:	608d      	str	r5, [r1, #8]
 800109e:	d3c7      	bcc.n	8001030 <_free_r+0x98>
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <_free_r+0x1ac>)
 80010a2:	4640      	mov	r0, r8
 80010a4:	6819      	ldr	r1, [r3, #0]
 80010a6:	f7ff ff29 	bl	8000efc <_malloc_trim_r>
 80010aa:	e7c1      	b.n	8001030 <_free_r+0x98>
 80010ac:	1819      	adds	r1, r3, r0
 80010ae:	6849      	ldr	r1, [r1, #4]
 80010b0:	07c9      	lsls	r1, r1, #31
 80010b2:	d409      	bmi.n	80010c8 <_free_r+0x130>
 80010b4:	68d9      	ldr	r1, [r3, #12]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4402      	add	r2, r0
 80010ba:	f042 0001 	orr.w	r0, r2, #1
 80010be:	60d9      	str	r1, [r3, #12]
 80010c0:	608b      	str	r3, [r1, #8]
 80010c2:	6068      	str	r0, [r5, #4]
 80010c4:	50aa      	str	r2, [r5, r2]
 80010c6:	e7b3      	b.n	8001030 <_free_r+0x98>
 80010c8:	f042 0301 	orr.w	r3, r2, #1
 80010cc:	606b      	str	r3, [r5, #4]
 80010ce:	50aa      	str	r2, [r5, r2]
 80010d0:	e7ae      	b.n	8001030 <_free_r+0x98>
 80010d2:	2b14      	cmp	r3, #20
 80010d4:	d814      	bhi.n	8001100 <_free_r+0x168>
 80010d6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 80010da:	0060      	lsls	r0, r4, #1
 80010dc:	e7b5      	b.n	800104a <_free_r+0xb2>
 80010de:	684a      	ldr	r2, [r1, #4]
 80010e0:	10a4      	asrs	r4, r4, #2
 80010e2:	2001      	movs	r0, #1
 80010e4:	40a0      	lsls	r0, r4
 80010e6:	4302      	orrs	r2, r0
 80010e8:	604a      	str	r2, [r1, #4]
 80010ea:	461a      	mov	r2, r3
 80010ec:	e7bc      	b.n	8001068 <_free_r+0xd0>
 80010ee:	f042 0301 	orr.w	r3, r2, #1
 80010f2:	614d      	str	r5, [r1, #20]
 80010f4:	610d      	str	r5, [r1, #16]
 80010f6:	60ec      	str	r4, [r5, #12]
 80010f8:	60ac      	str	r4, [r5, #8]
 80010fa:	606b      	str	r3, [r5, #4]
 80010fc:	50aa      	str	r2, [r5, r2]
 80010fe:	e797      	b.n	8001030 <_free_r+0x98>
 8001100:	2b54      	cmp	r3, #84	; 0x54
 8001102:	d804      	bhi.n	800110e <_free_r+0x176>
 8001104:	0b13      	lsrs	r3, r2, #12
 8001106:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800110a:	0060      	lsls	r0, r4, #1
 800110c:	e79d      	b.n	800104a <_free_r+0xb2>
 800110e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001112:	d804      	bhi.n	800111e <_free_r+0x186>
 8001114:	0bd3      	lsrs	r3, r2, #15
 8001116:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800111a:	0060      	lsls	r0, r4, #1
 800111c:	e795      	b.n	800104a <_free_r+0xb2>
 800111e:	f240 5054 	movw	r0, #1364	; 0x554
 8001122:	4283      	cmp	r3, r0
 8001124:	d804      	bhi.n	8001130 <_free_r+0x198>
 8001126:	0c93      	lsrs	r3, r2, #18
 8001128:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800112c:	0060      	lsls	r0, r4, #1
 800112e:	e78c      	b.n	800104a <_free_r+0xb2>
 8001130:	20fc      	movs	r0, #252	; 0xfc
 8001132:	247e      	movs	r4, #126	; 0x7e
 8001134:	e789      	b.n	800104a <_free_r+0xb2>
 8001136:	bf00      	nop
 8001138:	20000434 	.word	0x20000434
 800113c:	2000043c 	.word	0x2000043c
 8001140:	2000083c 	.word	0x2000083c
 8001144:	20000870 	.word	0x20000870

08001148 <__register_exitproc>:
 8001148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800114c:	4c25      	ldr	r4, [pc, #148]	; (80011e4 <__register_exitproc+0x9c>)
 800114e:	6825      	ldr	r5, [r4, #0]
 8001150:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8001154:	4606      	mov	r6, r0
 8001156:	4688      	mov	r8, r1
 8001158:	4692      	mov	sl, r2
 800115a:	4699      	mov	r9, r3
 800115c:	b3cc      	cbz	r4, 80011d2 <__register_exitproc+0x8a>
 800115e:	6860      	ldr	r0, [r4, #4]
 8001160:	281f      	cmp	r0, #31
 8001162:	dc18      	bgt.n	8001196 <__register_exitproc+0x4e>
 8001164:	1c43      	adds	r3, r0, #1
 8001166:	b17e      	cbz	r6, 8001188 <__register_exitproc+0x40>
 8001168:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800116c:	2101      	movs	r1, #1
 800116e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8001172:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8001176:	fa01 f200 	lsl.w	r2, r1, r0
 800117a:	4317      	orrs	r7, r2
 800117c:	2e02      	cmp	r6, #2
 800117e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8001182:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8001186:	d01e      	beq.n	80011c6 <__register_exitproc+0x7e>
 8001188:	3002      	adds	r0, #2
 800118a:	6063      	str	r3, [r4, #4]
 800118c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8001190:	2000      	movs	r0, #0
 8001192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <__register_exitproc+0xa0>)
 8001198:	b303      	cbz	r3, 80011dc <__register_exitproc+0x94>
 800119a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800119e:	f7ff fbdb 	bl	8000958 <malloc>
 80011a2:	4604      	mov	r4, r0
 80011a4:	b1d0      	cbz	r0, 80011dc <__register_exitproc+0x94>
 80011a6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80011aa:	2700      	movs	r7, #0
 80011ac:	e880 0088 	stmia.w	r0, {r3, r7}
 80011b0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80011b4:	4638      	mov	r0, r7
 80011b6:	2301      	movs	r3, #1
 80011b8:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80011bc:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	d0e1      	beq.n	8001188 <__register_exitproc+0x40>
 80011c4:	e7d0      	b.n	8001168 <__register_exitproc+0x20>
 80011c6:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80011ca:	430a      	orrs	r2, r1
 80011cc:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80011d0:	e7da      	b.n	8001188 <__register_exitproc+0x40>
 80011d2:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80011d6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80011da:	e7c0      	b.n	800115e <__register_exitproc+0x16>
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e4:	080011f0 	.word	0x080011f0
 80011e8:	08000959 	.word	0x08000959
 80011ec:	00000043 	.word	0x00000043

080011f0 <_global_impure_ptr>:
 80011f0:	20000008                                ... 

080011f4 <_init>:
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f6:	bf00      	nop
 80011f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fa:	bc08      	pop	{r3}
 80011fc:	469e      	mov	lr, r3
 80011fe:	4770      	bx	lr

08001200 <_fini>:
 8001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001202:	bf00      	nop
 8001204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001206:	bc08      	pop	{r3}
 8001208:	469e      	mov	lr, r3
 800120a:	4770      	bx	lr
